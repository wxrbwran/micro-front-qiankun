{"version":3,"sources":["../webpack/universalModuleDefinition","public-path.js","App.js","serviceWorker.js","index.js"],"names":["root","factory","exports","module","define","amd","this","window","__POWERED_BY_QIANKUN__","__webpack_public_path__","__INJECTED_PUBLIC_PATH_BY_QIANKUN__","User","lazy","Home","About","App","useState","visible","setVisible","basename","className","style","color","onClick","onOk","onCancel","version","antdVersion","to","fallback","path","component","Boolean","location","hostname","match","render","ReactDOM","document","getElementById","bootstrap","a","async","console","log","mount","props","unmount","unmountComponentAtNode","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,kBAAZC,SAA0C,kBAAXC,OACxCA,OAAOD,QAAUD,IACQ,oBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,kBAAZC,QACdA,QAAQ,gBAAkBD,IAE1BD,EAAK,gBAAkBC,IARzB,CASGK,MAAM,WACT,O,0KCVIC,OAAOC,yBAETC,IAA0BF,OAAOG,sC,wJCI7BC,G,OAAOC,gBAAK,kBAAM,kCAyCxB,SAASC,IACP,OAAO,oCAGT,SAASC,IACP,OAAO,qCAGMC,MA/Cf,WAAgB,IAAD,EACiBC,oBAAS,GAD1B,mBACNC,EADM,KACGC,EADH,KAGb,OACE,kBAAC,IAAD,CAAQC,SAAUZ,OAAOC,uBAAyB,SAAW,KAC3D,yBAAKY,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,MAAO,CAAEC,MAAO,UAArB,eACA,kBAAC,IAAD,CAAQC,QAAS,kBAAML,GAAW,KAAlC,mBACA,kBAAC,IAAD,CAAOD,QAASA,EAASO,KAAM,kBAAMN,GAAW,IAAQO,SAAU,kBAAMP,GAAW,KAAnF,eACeQ,UADf,aACkCC,MAIpC,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,YAIN,kBAAC,WAAD,CAAUC,SAAU,4CAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,SAASC,UAAWjB,IAChC,kBAAC,IAAD,CAAOgB,KAAK,SAASC,UAAWpB,IAChC,kBAAC,IAAD,CAAOmB,KAAK,IAAIC,UAAWlB,S,cC3BnBmB,QACW,cAA7BzB,OAAO0B,SAASC,UAEe,UAA7B3B,OAAO0B,SAASC,UAEhB3B,OAAO0B,SAASC,SAASC,MAAM,2DCVnC,SAASC,IACPC,IAASD,OAAO,kBAAC,EAAD,MAASE,SAASC,eAAe,SAO5C,SAAeC,IAAf,SAAAC,EAAAC,OAAA,gDACLC,QAAQC,IAAI,yBADP,qCAIA,SAAeC,EAAMC,GAArB,SAAAL,EAAAC,OAAA,gDACLC,QAAQC,IAAIE,GACZV,IAFK,qCAKA,SAAeW,IAAf,SAAAN,EAAAC,OAAA,gDACLL,IAASW,uBAAuBV,SAASC,eAAe,SADnD,qC,wHAbFhC,OAAOC,wBACV4B,ID8GI,kBAAmBa,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bc9323aa.chunk.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"react16-main\"] = factory();\n\telse\n\t\troot[\"react16-main\"] = factory();\n})(this, function() {\nreturn ","if (window.__POWERED_BY_QIANKUN__) {\n  // eslint-disable-next-line no-undef\n  __webpack_public_path__ = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;\n}\n","import { Button, Modal, version as antdVersion } from 'antd';\nimport 'antd/dist/antd.min.css';\nimport React, { lazy, Suspense, useState, version } from 'react';\nimport { BrowserRouter as Router, Link, Route, Switch } from 'react-router-dom';\nimport './App.css';\n\nconst User = lazy(() => import('./User'));\n\nfunction App() {\n  const [visible, setVisible] = useState(false);\n\n  return (\n    <Router basename={window.__POWERED_BY_QIANKUN__ ? '/react' : '/'}>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div style={{ color: 'green' }}>Hello React</div>\n          <Button onClick={() => setVisible(true)}>open antd modal</Button>\n          <Modal visible={visible} onOk={() => setVisible(false)} onCancel={() => setVisible(false)}>\n            Hello React {version} and antd {antdVersion}\n          </Modal>\n        </header>\n\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/about\">About</Link>\n            </li>\n            <li>\n              <Link to=\"/users\">Users</Link>\n            </li>\n          </ul>\n        </nav>\n        <Suspense fallback={<div>Loading...</div>}>\n          <Switch>\n            <Route path=\"/about\" component={About} />\n            <Route path=\"/users\" component={User} />\n            <Route path=\"/\" component={Home} />\n          </Switch>\n        </Suspense>\n      </div>\n    </Router>\n  );\n}\n\nfunction Home() {\n  return <h2>Home</h2>;\n}\n\nfunction About() {\n  return <h2>About</h2>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport './public-path';\nimport * as serviceWorker from './serviceWorker';\n\nfunction render() {\n  ReactDOM.render(<App />, document.getElementById('root'));\n}\n\nif (!window.__POWERED_BY_QIANKUN__) {\n  render();\n}\n\nexport async function bootstrap() {\n  console.log('react app bootstraped');\n}\n\nexport async function mount(props) {\n  console.log(props);\n  render();\n}\n\nexport async function unmount() {\n  ReactDOM.unmountComponentAtNode(document.getElementById('root'));\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}